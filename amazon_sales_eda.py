# -*- coding: utf-8 -*-
"""Amazon Sales EDA.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1eaZleCYmY_g7lxJ_z53zP63MqHjf4YyD

Data Preparation
"""

import pandas as pd

df = pd.read_csv('amazon.csv')

# take a look on top 5 rows of the data
df.head()

# understand the shape of the dataset
df.shape

df.info()

# check for missing values
df.isnull().sum()

# list the rows that contain missing values in the rating_count column
df[df['rating_count'].isnull()]

# remove the rows with missing values in the rating_count column
df.dropna(subset=['rating_count'], inplace=True)

# covert certain columns into numeric values
df['discounted_price'] = df['discounted_price'].astype(str).str.replace('₹', '').str.replace(',', '').astype(float)
df['actual_price'] = df['actual_price'].astype(str).str.replace('₹', '').str.replace(',', '').astype(float)
df['discount_percentage'] = df['discount_percentage'].astype(str).str.replace('%','').astype(float)/100
df['rating_count'] = df['rating_count'].astype(str).str.replace(',', '').astype(float)
# rating_count
# Step 1: Replace empty strings or whitespace in 'rating' with NaN
df['rating'] = df['rating'].replace('', pd.NA).str.strip()
# Step 2: Remove rows where 'rating' is not a valid number
df = df.dropna(subset=['rating'])  # Drop rows where 'rating' is NaN
df = df[df['rating'].apply(lambda x: x.replace('.', '', 1).isdigit())]  # Keep only numeric ratings
# Step 3: Convert the 'rating' column to float
df['rating'] = df['rating'].astype(float)

df.head()

# if there are any duplicates in product_id
df['product_id'].duplicated().any()

duplicate_rows = df[df['product_id'].duplicated(keep=False)]
print(duplicate_rows['product_id'] )

# combine duplicates
df= df.groupby('product_id').agg({
    'product_name': 'first',  # use the first product name
    'category': 'first',
    'discounted_price': 'first',
    'actual_price': 'first',
    'discount_percentage': 'first',
    'rating': 'mean',  # take the average rating
    'rating_count': 'sum',  # sum up the rating counts for duplicates
    'about_product': lambda x: ','.join(x),
    'user_id': lambda x: ','.join(x),
    'user_name': lambda x: ','.join(x),
    'review_id': lambda x: ','.join(x),
    'review_title': lambda x: ','.join(x),
    'review_content': lambda x: ','.join(x),
}).reset_index()

# create new columns: Level 1 to Level 3 Categories
df['first_category'] = df['category'].astype(str).str.split('|').str[0]
df['second_category'] = df['category'].astype(str).str.split('|').str[-1]
df['third_category'] = df['category'].astype(str).str.split('|').str[-2]

df.info()
df.head()

"""*Exploratory Data Analysis (EDA)*



"""

import matplotlib.pyplot as plt
import numpy as np

# Define the bins with an interval of 0.5
bins = np.arange(df['rating'].min(), df['rating'].max() + 0.5, 0.5)

# Create the histogram
plt.figure(figsize=(10, 6))
plt.hist(df['rating'], bins=bins, edgecolor='black', color='skyblue')

# Add titles and labels
plt.title('Distribution of Products by Rating', fontsize=16)
plt.xlabel('Rating', fontsize=14)
plt.ylabel('Number of Products', fontsize=14)

# Show the plot
plt.grid(True)  # add gridlines to the plot
plt.show()

# Digitize the ratings into bins
df['rating_bin'] = np.digitize(df['rating'], bins, right=True)

# Count the number of products in each bin, ensuring all bins are represented
rating_summary = df.groupby('rating_bin')['rating'].count().reindex(range(1, len(bins)), fill_value=0)

bin_ranges = [f'{bins[i]} - {bins[i+1]}' for i in range(len(bins)-1)]
pd.DataFrame({'Rating Range': bin_ranges, 'Number of Products': rating_summary.values})

"""The majority of products have a rating between 4.0 and 4.5, indicating that most products are highly rated. A smaller number of products fall into the 3.5 to 4.0 rating range, and very few products have ratings below 3.5 or above 4.5. This suggests that the products tend to have generally positive reviews, with the highest concentration around the 4.0 to 4.5 rating bracket."""

import seaborn as sns

plt.figure(figsize=(10, 6))

# Create the box plot
sns.boxplot(x='rating', y='discount_percentage', data=df)

# Add titles and labels
plt.title('Box Plot of Discount Percentage by Rating', fontsize=16)
plt.xlabel('Rating', fontsize=14)
plt.ylabel('Discount Percentage (%)', fontsize=14)

# Show the plot
plt.grid(True)
plt.show()

""" observations:

Ratings below 3.0 have smaller sample sizes, as indicated by the absence of interquartile ranges in some cases.
There is a noticeable variability in discount percentages, particularly in the middle rating range (3.0 to 4.5).
Products with very high ratings (4.7 to 5.0) tend to have higher median discount percentages again, though with a smaller spread.
"""

# Bin the discount_percentage into 0.5 increments
bins = np.arange(df['discount_percentage'].min(), df['discount_percentage'].max() + 0.05, 0.05)
df['discount_bin'] = pd.cut(df['discount_percentage'], bins=bins)

# Calculate the mean of rating_count for each bin
mean_rating_count = df.groupby('discount_bin')['rating_count'].mean().reset_index()

plt.figure(figsize=(10, 6))

# Create the line plot
plt.plot(mean_rating_count['discount_bin'].astype(str), mean_rating_count['rating_count'], marker='o', linestyle='-', color='slateblue')

# Rotate x-axis labels for readability
plt.xticks(rotation=90)

# Add titles and labels
plt.title('Line Plot of Discount Percentage by Rating Counts', fontsize=16)
plt.xlabel('Discount Percentage (Binned)', fontsize=14)
plt.ylabel('Average Number of People Voting for Rating', fontsize=14)

# Show the plot
plt.show()

"""here is a noticeable peak in the average number of votes for products with discount percentages between 0.15 and 0.25, where the average number of voters reaches its highest point, around 35,000.
After this peak, there is a general downward trend, with a few fluctuations, as the discount percentage increases.
There is another peak at the discount range of 0.5 to 0.7, though it is smaller than the first peak.
Towards the higher discount ranges (above 0.85), the number of voters significantly drops, indicating less engagement at these discount levels.

**Categorical Analysis
Objective: Identify which product categories perform best in terms of sales, ratings, and customer engagement**.
"""

#Count the number of products in each category
first_category_counts = df['first_category'].value_counts()

# Sort the categories in descending order
first_category_counts = first_category_counts.sort_values(ascending=False)

# Create the histogram in descending order
plt.figure(figsize=(10, 6))
plt.bar(first_category_counts.index, first_category_counts.values, color='lightpink', edgecolor='black')

# Rotate x-axis labels for readability
plt.xticks(rotation=90)

# Add titles and labels
plt.ylabel('Number of Products')
plt.xlabel('Name of First Category')
plt.title('Distribution of Products by First Category (Descending Order)')
plt.show()

# Distribution of First categories
pd.DataFrame({'First Category': first_category_counts.index, 'Number of Products': first_category_counts.values})

"""The "Electronics" category dominates, with 490 products listed, making it the most prevalent category. Following closely are "Home & Kitchen" with 447 products and "Computers & Accessories" with 373 products. Other categories such as "Office Products" have significantly fewer offerings, with only 31 products, and categories like "Musical Instruments" and "Home Improvement" have just 2 products each. Categories like "Toys & Games," "Health & Personal Care," and "Car & Motorbike" have the least representation, with only 1 product each."""

# Filter the DataFrame to include only products where the first category is 'Electronics'
electronics_df = df[df['first_category'] == 'Electronics']

# Count the number of products in each third category
third_category_counts = electronics_df['third_category'].value_counts()

# Separate the top 10 third categories
top_10_third_categories = third_category_counts.nlargest(10)
others_count = third_category_counts.iloc[10:].sum()

# Add the 'Others' category
top_10_third_categories['Others'] = others_count

# Create the pie chart
plt.figure(figsize=(10, 8))
plt.pie(top_10_third_categories, labels=top_10_third_categories.index, autopct='%1.1f%%', startangle=140, colors=sns.color_palette("flare"))

# Add a title
plt.title('Distribution of Products in Top 10 Third Categories within Electronics First Category', fontsize=16)

# Show the pie chart
plt.show()

pd.DataFrame({'Third category od products': top_10_third_categories.index, 'Numbers of products sold': top_10_third_categories.values})

from wordcloud import WordCloud, STOPWORDS

# Filter the DataFrame to include only rows where the third category is 'Smartphones & Basic Mobiles'
smartphones_reviews_df = df[df['third_category'] == 'Smartphones&BasicMobiles']

# Combine all review content into a single string
smartphones_reviews_text = ' '.join(smartphones_reviews_df['review_content'].dropna().astype(str))

# Set up stopwords (you can add more specific to your analysis if needed)
stopwords = set(STOPWORDS)

# Generate the word cloud for the filtered reviews
wordcloud = WordCloud(width=800, height=400, background_color='white', stopwords=stopwords, colormap='coolwarm', max_words=100).generate(smartphones_reviews_text)

# Plot the word cloud
plt.figure(figsize=(10, 6))
plt.imshow(wordcloud, interpolation='bilinear')
plt.axis('off')
plt.title('Word Cloud of Review Content for Smartphones & Basic Mobiles', fontsize=16)
plt.show()

"""From the pie chart above, we can easily realize that Smartphones & Basic Mobiles is the most prevalent subcategory in eletronics products. Therefore, in the next step, we visuzlize all reviews for smartphones and basic moblies to understand the potential trends in reviews.

The word cloud visualizes the most frequently mentioned words in reviews for smartphones and basic mobiles. Key terms include "phone," "camera," "good," "use," and "battery," indicating that these aspects are commonly discussed by customers. Words like "day," "life," "quality," "better," and "feature" are also prominent, suggesting that users frequently comment on the daily use, battery life, and overall quality of the devices. The presence of brand names like "Samsung" and specific product attributes like "price" and "screen" highlights what factors might influence customer satisfaction and feedback. Overall, the word cloud suggests that functionality, camera quality, and battery performance are top considerations for users. And based on those considerations, most customers have had positive feedbacks for those mobiles and smartphones.

### Summary and Key Insights
Product Ratings and Discounts:
Amazon's strategy of using discounts appears to be effective in driving customer engagement. However, very high discounts do not necessarily translate to higher customer interaction. Therefore, the most practical and economically efficient approach is to focus on discounting products within the 15 to 25 percent range. This discount range has been observed to attract the highest number of customer ratings, suggesting it is the sweet spot for balancing customer engagement with revenue optimization.

Category Performance:
The Electronics category, particularly smartphones, is a crucial driver of sales on Amazon. This segment not only has the most products but also garners significant customer attention and feedback**
"""